// Script para testar a conex√£o com o Supabase
// Execute com: node test-supabase-connection.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

console.log('üîç Testando conex√£o com Supabase...');
console.log('URL:', supabaseUrl);
console.log('Key:', supabaseKey ? `${supabaseKey.substring(0, 20)}...` : 'N√ÉO DEFINIDA');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnection() {
  try {
    console.log('\n1. Testando conex√£o b√°sica...');
    
    // Teste 1: Verificar se consegue conectar
    const { data: healthCheck, error: healthError } = await supabase
      .from('_supabase_health_check')
      .select('*')
      .limit(1);
    
    if (healthError && !healthError.message.includes('relation "_supabase_health_check" does not exist')) {
      console.error('‚ùå Erro de conex√£o:', healthError.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    console.log('\n2. Verificando se as tabelas existem...');
    
    // Teste 2: Verificar tabelas
    const { data: tables, error: tablesError } = await supabase
      .rpc('get_tables_info')
      .then(() => ({ data: 'RPC dispon√≠vel', error: null }))
      .catch(async () => {
        // Fallback: tentar acessar diretamente as tabelas
        const { data, error } = await supabase
          .from('saloes')
          .select('count')
          .limit(1);
        return { data, error };
      });
    
    if (tablesError) {
      console.error('‚ùå Tabela "saloes" n√£o encontrada:', tablesError.message);
      console.log('\nüìã SOLU√á√ÉO:');
      console.log('1. Acesse o painel do Supabase: https://supabase.com/');
      console.log('2. V√° para SQL Editor');
      console.log('3. Execute o script supabase-setup.sql');
      console.log('4. Verifique se as tabelas foram criadas');
      return;
    }
    
    console.log('‚úÖ Tabela "saloes" encontrada!');
    
    console.log('\n3. Testando opera√ß√µes CRUD...');
    
    // Teste 3: Inserir dados de teste
    const testSalao = {
      nome: 'Teste Conex√£o',
      endereco: 'Endere√ßo de teste',
      telefone: '(11) 99999-9999',
      email: 'teste@teste.com'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('saloes')
      .insert([testSalao])
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå Erro ao inserir dados:', insertError.message);
      return;
    }
    
    console.log('‚úÖ Inser√ß√£o bem-sucedida!');
    
    // Teste 4: Buscar dados
    const { data: selectData, error: selectError } = await supabase
      .from('saloes')
      .select('*')
      .eq('id', insertData.id)
      .single();
    
    if (selectError) {
      console.error('‚ùå Erro ao buscar dados:', selectError.message);
      return;
    }
    
    console.log('‚úÖ Busca bem-sucedida!');
    
    // Teste 5: Limpar dados de teste
    const { error: deleteError } = await supabase
      .from('saloes')
      .delete()
      .eq('id', insertData.id);
    
    if (deleteError) {
      console.error('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar dados de teste:', deleteError.message);
    } else {
      console.log('‚úÖ Limpeza bem-sucedida!');
    }
    
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('Sua conex√£o com o Supabase est√° funcionando perfeitamente.');
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verifique se as vari√°veis de ambiente est√£o corretas');
    console.log('2. Confirme se o projeto Supabase est√° ativo');
    console.log('3. Execute o script supabase-setup.sql no SQL Editor');
    console.log('4. Verifique as permiss√µes RLS (Row Level Security)');
  }
}

testConnection();