{"ast":null,"code":"import emailjs from '@emailjs/browser';\n\n// Configurações do EmailJS\n// IMPORTANTE: Substitua essas configurações pelas suas próprias do EmailJS\nconst EMAIL_CONFIG = {\n  serviceId: 'service_xxxxxxx',\n  // Substitua pelo seu Service ID\n  templateId: 'template_xxxxxxx',\n  // Substitua pelo seu Template ID\n  publicKey: 'xxxxxxxxxxxxxxx' // Substitua pela sua Public Key\n};\nexport const enviarCadastroCliente = async dados => {\n  try {\n    // Inicializar EmailJS com a chave pública\n    emailjs.init(EMAIL_CONFIG.publicKey);\n\n    // Preparar os dados para o template\n    const templateParams = {\n      to_name: 'Administrador',\n      // Nome do destinatário\n      from_name: dados.nome,\n      from_email: dados.email,\n      phone: dados.telefone,\n      address: dados.endereco || 'Não informado',\n      message: dados.mensagem || 'Nenhuma mensagem adicional',\n      reply_to: dados.email\n    };\n\n    // Enviar email\n    const response = await emailjs.send(EMAIL_CONFIG.serviceId, EMAIL_CONFIG.templateId, templateParams);\n    console.log('Email enviado com sucesso:', response);\n    return true;\n  } catch (error) {\n    console.error('Erro ao enviar email:', error);\n    return false;\n  }\n};\n\n// Função para validar configuração do EmailJS\nexport const isEmailConfigured = () => {\n  return EMAIL_CONFIG.serviceId !== 'service_xxxxxxx' && EMAIL_CONFIG.templateId !== 'template_xxxxxxx' && EMAIL_CONFIG.publicKey !== 'xxxxxxxxxxxxxxx';\n};\n\n// Instruções para configurar o EmailJS:\n/*\n1. Acesse https://www.emailjs.com/\n2. Crie uma conta gratuita\n3. Crie um novo serviço de email (Gmail, Outlook, etc.)\n4. Crie um template de email com as seguintes variáveis:\n   - {{to_name}} - Nome do destinatário\n   - {{from_name}} - Nome do cliente\n   - {{from_email}} - Email do cliente\n   - {{phone}} - Telefone do cliente\n   - {{address}} - Endereço do cliente\n   - {{message}} - Mensagem do cliente\n   - {{reply_to}} - Email para resposta\n5. Copie o Service ID, Template ID e Public Key\n6. Substitua as configurações acima pelas suas\n\nExemplo de template de email:\n\nAssunto: Novo Cadastro de Cliente - Salões Online\n\nOlá {{to_name}},\n\nVocê recebeu um novo cadastro de cliente:\n\nNome: {{from_name}}\nEmail: {{from_email}}\nTelefone: {{phone}}\nEndereço: {{address}}\n\nMensagem:\n{{message}}\n\nAtenciosamente,\nSistema Salões Online\n*/","map":{"version":3,"names":["emailjs","EMAIL_CONFIG","serviceId","templateId","publicKey","enviarCadastroCliente","dados","init","templateParams","to_name","from_name","nome","from_email","email","phone","telefone","address","endereco","message","mensagem","reply_to","response","send","console","log","error","isEmailConfigured"],"sources":["C:/Users/thelo/OneDrive/Imagens/projeto rh/saloes/src/services/emailService.ts"],"sourcesContent":["import emailjs from '@emailjs/browser';\n\n// Configurações do EmailJS\n// IMPORTANTE: Substitua essas configurações pelas suas próprias do EmailJS\nconst EMAIL_CONFIG = {\n  serviceId: 'service_xxxxxxx', // Substitua pelo seu Service ID\n  templateId: 'template_xxxxxxx', // Substitua pelo seu Template ID\n  publicKey: 'xxxxxxxxxxxxxxx', // Substitua pela sua Public Key\n};\n\nexport interface ClienteData {\n  nome: string;\n  email: string;\n  telefone: string;\n  endereco?: string;\n  mensagem?: string;\n}\n\nexport const enviarCadastroCliente = async (dados: ClienteData): Promise<boolean> => {\n  try {\n    // Inicializar EmailJS com a chave pública\n    emailjs.init(EMAIL_CONFIG.publicKey);\n\n    // Preparar os dados para o template\n    const templateParams = {\n      to_name: 'Administrador', // Nome do destinatário\n      from_name: dados.nome,\n      from_email: dados.email,\n      phone: dados.telefone,\n      address: dados.endereco || 'Não informado',\n      message: dados.mensagem || 'Nenhuma mensagem adicional',\n      reply_to: dados.email,\n    };\n\n    // Enviar email\n    const response = await emailjs.send(\n      EMAIL_CONFIG.serviceId,\n      EMAIL_CONFIG.templateId,\n      templateParams\n    );\n\n    console.log('Email enviado com sucesso:', response);\n    return true;\n  } catch (error) {\n    console.error('Erro ao enviar email:', error);\n    return false;\n  }\n};\n\n// Função para validar configuração do EmailJS\nexport const isEmailConfigured = (): boolean => {\n  return (\n    EMAIL_CONFIG.serviceId !== 'service_xxxxxxx' &&\n    EMAIL_CONFIG.templateId !== 'template_xxxxxxx' &&\n    EMAIL_CONFIG.publicKey !== 'xxxxxxxxxxxxxxx'\n  );\n};\n\n// Instruções para configurar o EmailJS:\n/*\n1. Acesse https://www.emailjs.com/\n2. Crie uma conta gratuita\n3. Crie um novo serviço de email (Gmail, Outlook, etc.)\n4. Crie um template de email com as seguintes variáveis:\n   - {{to_name}} - Nome do destinatário\n   - {{from_name}} - Nome do cliente\n   - {{from_email}} - Email do cliente\n   - {{phone}} - Telefone do cliente\n   - {{address}} - Endereço do cliente\n   - {{message}} - Mensagem do cliente\n   - {{reply_to}} - Email para resposta\n5. Copie o Service ID, Template ID e Public Key\n6. Substitua as configurações acima pelas suas\n\nExemplo de template de email:\n\nAssunto: Novo Cadastro de Cliente - Salões Online\n\nOlá {{to_name}},\n\nVocê recebeu um novo cadastro de cliente:\n\nNome: {{from_name}}\nEmail: {{from_email}}\nTelefone: {{phone}}\nEndereço: {{address}}\n\nMensagem:\n{{message}}\n\nAtenciosamente,\nSistema Salões Online\n*/"],"mappings":"AAAA,OAAOA,OAAO,MAAM,kBAAkB;;AAEtC;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,iBAAiB;EAAE;EAC9BC,UAAU,EAAE,kBAAkB;EAAE;EAChCC,SAAS,EAAE,iBAAiB,CAAE;AAChC,CAAC;AAUD,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,KAAkB,IAAuB;EACnF,IAAI;IACF;IACAN,OAAO,CAACO,IAAI,CAACN,YAAY,CAACG,SAAS,CAAC;;IAEpC;IACA,MAAMI,cAAc,GAAG;MACrBC,OAAO,EAAE,eAAe;MAAE;MAC1BC,SAAS,EAAEJ,KAAK,CAACK,IAAI;MACrBC,UAAU,EAAEN,KAAK,CAACO,KAAK;MACvBC,KAAK,EAAER,KAAK,CAACS,QAAQ;MACrBC,OAAO,EAAEV,KAAK,CAACW,QAAQ,IAAI,eAAe;MAC1CC,OAAO,EAAEZ,KAAK,CAACa,QAAQ,IAAI,4BAA4B;MACvDC,QAAQ,EAAEd,KAAK,CAACO;IAClB,CAAC;;IAED;IACA,MAAMQ,QAAQ,GAAG,MAAMrB,OAAO,CAACsB,IAAI,CACjCrB,YAAY,CAACC,SAAS,EACtBD,YAAY,CAACE,UAAU,EACvBK,cACF,CAAC;IAEDe,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,QAAQ,CAAC;IACnD,OAAO,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAe;EAC9C,OACEzB,YAAY,CAACC,SAAS,KAAK,iBAAiB,IAC5CD,YAAY,CAACE,UAAU,KAAK,kBAAkB,IAC9CF,YAAY,CAACG,SAAS,KAAK,iBAAiB;AAEhD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}